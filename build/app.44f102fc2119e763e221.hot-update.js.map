{"version":3,"sources":["webpack:///./src/app/components/pages/topic/TopicForm.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACwC;AACF;AAIsB;AAGnC;AAGuC;AAGvB;AACf;AAEoC;AACS;AAevE;IAAoB,yBAA4B;IAuB9C,eAAmB,KAAkB;QAArC,YACE,kBAAM,KAAK,CAAC,SAGf;QAzBkB,kBAAY,GAAgB,qEAAS,CAAC,GAAG,CAAc,4EAAkB,CAAC,WAAW,CAAC,CAAC;QAuBtG,KAAI,CAAC,OAAO,GAAG,qEAAS,CAAC,GAAG,CAAe,4EAAkB,CAAC,WAAW,CAAC,CAAC;QAC3E,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;;IAC5C,CAAC;IAlBC,iCAAiB,GAAjB;QACE,IAAI,CAAC,SAAS,EAAG;IACnB,CAAC;IAED,yBAAS,GAAT;QAAA,iBAQC;QAPC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAC,IAAI,EAAC,qDAAK,EAAC,CAAC,CAAC;QAClC,4CAAK,CAAC,GAAG,CAAC,oCAAoC,EAAC,EAAC,OAAO,EAAE,EAAC,aAAa,EAAE,YAAU,IAAI,CAAC,YAAY,CAAC,YAAY,EAAI,EAAC,EAAC,CAAE;aACxH,IAAI,CAAC,gBAAM,IAAI,YAAI,CAAC,QAAQ,CAAC;YAC5B,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM;SAC1B,CAAC,EAFc,CAEd,CAAC;IAGL,CAAC;IAQM,sBAAM,GAAb;QACE,IAAM,KAAK,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;QACrB,OAAO,CACL,2DAAC,yDAAW,QACT,UAAC,CAAC,IAAK,QACN,2DAAC,+CAAO;YACN,2DAAC,2CAAG,IAAC,GAAG,EAAC,OAAO;gBACd,2DAAC,4CAAI,IAAC,OAAO,EAAC,QAAQ,EAAC,GAAG,EAAC,OAAO,EAAC,KAAK,EAAC,QAAQ,EAAC,SAAS,EAAC,SAAS,IAClE,KAAK,CAAC,GAAG,CAAC,iBAAO,IAAI,QAAC,uEAAW,CASjC,EATqB,CASrB,CAAC,CACG,CACH,CACE,CACX,EAjBO,CAiBP,CACW,CACf,CAAC;IACJ,CAAC;IACH,YAAC;AAAD,CAAC,CAtDmB,4CAAK,CAAC,SAAS,GAsDlC;AAED,SAAS,eAAe,CAAC,KAAiB;IACxC,oBAAW,KAAK,CAAC,KAAK,EAAE;AAC1B,CAAC;AAGM,IAAM,SAAS,GAAG,2DAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC","file":"app.44f102fc2119e763e221.hot-update.js","sourcesContent":["import { Formik, FormikBag, FormikHelpers, FormikProps } from \"formik\";\r\nimport React, { Dispatch } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Form, Icon } from \"semantic-ui-react\";\r\nimport { IRootState } from \"../../../reduxInfrastructure/RootState\";\r\nimport { IBaseFormProps } from \"../../../types/form/IBaseFormProps\";\r\nimport { Translation, useTranslation } from \"react-i18next\";\r\nimport { TopicDto } from \"../../../types/models/TopicDto\";\r\nimport { ITopicState } from \"./TopicState\";\r\nimport \"./TopicPage.css\";\r\nimport { TopicComponent } from \"../../shared/topic/topicComponent\";\r\nimport Pic1 from \"../../../../img/palm_tree_PNG93263.png\"\r\nimport { Grommet, ResponsiveContext, Box, Grid } from 'grommet';\r\nimport { grommet } from 'grommet/themes';\r\nimport { ISharedReduxProps } from \"../../../types/ISharedReduxProps\";\r\nimport { TOPIC } from \"./TopicConstants\";\r\nimport axios from \"axios\";\r\nimport { AuthService } from \"../../../services/authService\";\r\nimport container from \"../../../inversify/inversifyContainer\";\r\nimport { SERVICE_IDENTIFIER } from \"../../../inversify/inversifyTypes\";\r\nimport { TopicActions } from \"./TopicAction\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\n\r\ntype IFormState = TopicDto[];\r\ntype ITopicProps = IBaseFormProps<IFormState, {}>;\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n  items: TopicDto[];\r\n}\r\n\r\nclass Topic extends React.Component<ITopicProps> {\r\n  protected readonly actions: TopicActions;\r\n  private readonly _authService: AuthService = container.get<AuthService>(SERVICE_IDENTIFIER.AuthService);\r\n\r\n  // constructor(props: ITopicProps) {\r\n  //   super(props);\r\n  //   this.state = {items:[]};\r\n  // }\r\n\r\n  componentDidMount() {\r\n    this.getTopics ()\r\n  }\r\n\r\n  getTopics () {\r\n    this.props.dispatch({type:TOPIC});\r\n    axios.get('http://185.209.31.106:55558/topics',{headers: {Authorization: `Bearer ${this._authService.getAuthToken()}`}},)\r\n    .then(result => this.setState({\r\n      items: result.data.topics\r\n    }))\r\n\r\n    // console.log(this.props.form.record?)\r\n  }\r\n\r\n  public constructor(props: ITopicProps) {\r\n    super(props);\r\n    this.actions = container.get<TopicActions>(SERVICE_IDENTIFIER.TopicAction);\r\n    props.dispatch(this.actions.initForm());\r\n}\r\n\r\n  public render(): JSX.Element {\r\n    const cards = [1,2,3]\r\n    return (\r\n      <Translation>\r\n        {(t) => (\r\n          <Grommet>\r\n            <Box pad=\"large\">\r\n              <Grid columns='medium' gap=\"small\" align=\"center\" alignSelf=\"stretch\">\r\n                {cards.map(element => (<div></div>\r\n                    // <TopicComponent\r\n                    //   id={element.topicId}\r\n                    //   imagelink={Pic1}\r\n                    //   className=\"1\"\r\n                    //   title={element.title}\r\n                    //   description={\"Данная тема посвящена языку \"+ element.title}\r\n                    //   updateTopicList ={()=>this.getTopics()}\r\n                    // />\r\n                ))}\r\n              </Grid>\r\n            </Box>\r\n          </Grommet>\r\n        )}\r\n      </Translation>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: IRootState): ITopicState {\r\n  return {...state.topic};\r\n}\r\n\r\n\r\nexport const TopicForm = connect(mapStateToProps)(Topic);\r\n"],"sourceRoot":""}