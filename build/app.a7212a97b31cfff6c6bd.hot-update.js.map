{"version":3,"sources":["webpack:///./src/app/components/pages/topic/TopicForm.tsx"],"names":[],"mappings":"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","file":"app.a7212a97b31cfff6c6bd.hot-update.js","sourcesContent":["import { Formik, FormikBag, FormikHelpers, FormikProps } from \"formik\";\r\nimport React, { Dispatch } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Form, Icon } from \"semantic-ui-react\";\r\nimport { IRootState } from \"../../../reduxInfrastructure/RootState\";\r\nimport { IBaseFormProps } from \"../../../types/form/IBaseFormProps\";\r\nimport { Translation, useTranslation } from \"react-i18next\";\r\nimport { TopicDto } from \"../../../types/models/TopicDto\";\r\nimport { ITopicState } from \"./TopicState\";\r\nimport \"./TopicPage.css\";\r\nimport { TopicComponent } from \"../../shared/topic/topicComponent\";\r\nimport Pic1 from \"../../../../img/palm_tree_PNG93263.png\"\r\nimport { Grommet, ResponsiveContext, Box, Grid } from 'grommet';\r\nimport { grommet } from 'grommet/themes';\r\nimport { ISharedReduxProps } from \"../../../types/ISharedReduxProps\";\r\nimport { TOPIC } from \"./TopicConstants\";\r\nimport axios from \"axios\";\r\nimport { AuthService } from \"../../../services/authService\";\r\nimport container from \"../../../inversify/inversifyContainer\";\r\nimport { SERVICE_IDENTIFIER } from \"../../../inversify/inversifyTypes\";\r\nimport { TopicActions } from \"./TopicAction\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\n\r\ntype IFormState = TopicDto[];\r\ntype ITopicProps = IBaseFormProps<IFormState, {}>;\r\n\r\nclass Topic extends React.Component<ITopicProps> {\r\n  protected readonly actions: TopicActions;\r\n  private readonly _authService: AuthService = container.get<AuthService>(SERVICE_IDENTIFIER.AuthService);\r\n\r\n\r\n  public constructor(props: ITopicProps) {\r\n    super(props);\r\n    this.actions = container.get<TopicActions>(SERVICE_IDENTIFIER.TopicAction);\r\n    props.dispatch(this.actions.initForm());\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.dispatch({ type: TOPIC });\r\n    this.getTopics()\r\n  }\r\n\r\n  getTopics() {\r\n    axios.get('http://185.209.31.106:55558/topics', { headers: { Authorization: `Bearer ${this._authService.getAuthToken()}` } },)\r\n      .then(result => this.props.dispatch(this.actions.setTopics(result.data.topics)))\r\n    console.log(`Это пропы${this.props}`)\r\n  }\r\n\r\n  deleteTopic(topicId: number) {\r\n    axios.delete(`http://185.209.31.106:55558/topic/${topicId}/delete`, { headers: { Authorization: `Bearer ${this._authService.getAuthToken()}` } },)\r\n      .then(result => this.getTopics())\r\n  }\r\n\r\n  editComponent(topicId: number, title: string) {\r\n    axios.put(`http://185.209.31.106:55558/topic/${topicId}/edit`, { title: title }, { headers: { Authorization: `Bearer ${this._authService.getAuthToken()}` } },)\r\n      .then(result => this.getTopics())\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <Translation>\r\n        {(t) => (\r\n          <Grommet>\r\n            <Box pad=\"large\">\r\n              <Grid columns='medium' gap=\"small\" align=\"center\" alignSelf=\"stretch\">\r\n                {this.props.form.record.map(element => (\r\n                  <TopicComponent\r\n                    key={element.topicId}\r\n                    id={element.topicId}\r\n                    imagelink={Pic1}\r\n                    className=\"1\"\r\n                    title={element.title}\r\n                    description={\"Данная тема посвящена языку \" + element.title}\r\n                    deleteTopic={() => this.deleteTopic(element.topicId)}\r\n                    editTopic={(newTitle: string) => this.editComponent(element.topicId, newTitle)}\r\n                  />\r\n                ))}\r\n              </Grid>\r\n            </Box>\r\n          </Grommet>\r\n        )}\r\n      </Translation>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: IRootState): ITopicState {\r\n  return { ...state.topic }\r\n}\r\n\r\n\r\nexport const TopicForm = connect(mapStateToProps)(Topic);\r\n"],"sourceRoot":""}