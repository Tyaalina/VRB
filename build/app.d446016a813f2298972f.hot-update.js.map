{"version":3,"sources":["webpack:///./src/app/components/pages/topic/TopicForm.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAC0C;AACJ;AAOb;AAcR;AAEjB,IAAM,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,kEAAC,4CAAI,IAAC,GAAG,EAAE,CAAC,IAAG,UAAQ,CAAG,CAAQ,EAAlC,CAAkC,CAAC,CAAC;AAE1E,IAAM,OAAO,GAAG;IACrB,IAAM,IAAI,GAAG,wDAAU,CAAC,yDAAiB,CAAC,CAAC;IAC3C,OAAO,CACL,2DAAC,+CAAO,IAAC,KAAK,EAAE,+CAAO;QACrB,2DAAC,2CAAG,IAAC,GAAG,EAAC,OAAO;YACd,2DAAC,4CAAI,IAAC,OAAO,EAAE,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,GAAG,EAAC,OAAO,IAC5D,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,QAE1B,2DAAC,4CAAI,IAAC,GAAG,EAAC,OAAO,EAAC,GAAG,EAAE,KAAK,IACzB,IAAI,CACA,CACR,EAL2B,CAK3B,CAAC,CACG,CACH,CACE,CACX,CAAC;AACJ,CAAC,CAAC;AAKF;IAAoB,yBAA4B;IAAhD;;IA6BA,CAAC;IA5BQ,sBAAM,GAAb;QACE,IAAM,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC;QAEvB,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAC,KAAK,CAAC,MAAM,CAAC;QAC1C,OAAO,CACL,8EAAc,CAqBf,CAAC;IACJ,CAAC;IACH,YAAC;AAAD,CAAC,CA7BmB,4CAAK,CAAC,SAAS,GA6BlC;AAED,SAAS,eAAe,CAAC,KAAiB;IACxC,OAAO,KAAK,CAAC,YAAY,CAAC;AAC5B,CAAC;AAEM,IAAM,SAAS,GAAG,2DAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC","file":"app.d446016a813f2298972f.hot-update.js","sourcesContent":["import { Formik, FormikBag, FormikHelpers, FormikProps } from \"formik\";\r\nimport React, { useContext } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Form, Icon } from \"semantic-ui-react\";\r\nimport { IRootState } from \"../../../reduxInfrastructure/RootState\";\r\nimport { IBaseFormProps } from \"../../../types/form/IBaseFormProps\";\r\nimport { Translation, useTranslation } from \"react-i18next\";\r\nimport { TopicDto } from \"../../../types/models/TopicDto\";\r\nimport { ITopicState } from \"./TopicState\";\r\nimport \"./TopicPage.css\";\r\nimport { TopicComponent } from \"../../shared/topic/topicComponent\";\r\nimport Pic1 from \"../../../../img/palm_tree_PNG93263.png\"\r\n//import { Grommet, ResponsiveContext, Box, Grid } from 'grommet';\r\n//import { grommet } from 'grommet/themes';\r\n\r\nimport {\r\n  grommet,\r\n  Box,\r\n  Card,\r\n  Grid,\r\n  Grommet,\r\n  ResponsiveContext,\r\n  Text,\r\n} from 'grommet';\r\n\r\nconst cards = Array(20).fill().map((_, i) => <Text key={i}>{`Card ${i}`}</Text>);\r\n\r\nexport const Example = () => {\r\n  const size = useContext(ResponsiveContext);\r\n  return (\r\n    <Grommet theme={grommet}>\r\n      <Box pad=\"large\">\r\n        <Grid columns={size !== 'small' ? 'small' : '100%'} gap=\"small\">\r\n          {cards.map((card, index) => (\r\n            \r\n            <Card pad=\"large\" key={index}>\r\n              {card}\r\n            </Card>\r\n          ))}\r\n        </Grid>\r\n      </Box>\r\n    </Grommet>\r\n  );\r\n};\r\n\r\ntype IFormState = TopicDto;\r\ntype ITopicProps = IBaseFormProps<IFormState, {}>;\r\n\r\nclass Topic extends React.Component<ITopicProps> {\r\n  public render(): JSX.Element {\r\n    const cards = Array(20)\r\n    // const size = useContext(ResponsiveContext);\r\n    console.log(\"Размер массива\",cards.length)\r\n    return (\r\n      <div>123</div>\r\n      // <Translation>\r\n      //   {(t) => (\r\n      //     <Grommet theme={grommet} full>\r\n      //       <Box pad=\"large\">\r\n      //         <Grid columns={size !== 'small' ? 'small' : '100%'} gap=\"small\">\r\n      //           {cards.map(() => (\r\n\r\n      //             <TopicComponent\r\n      //               id=\"1\"\r\n      //               imagelink={Pic1}\r\n      //               className=\"1\"\r\n      //               title=\"test title\"\r\n      //               description=\"test description 1 2 3 lalala sasasasa one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen\"\r\n      //             />\r\n      //           ))}\r\n      //         </Grid>\r\n      //       </Box>\r\n      //     </Grommet>\r\n      //   )}\r\n      // </Translation>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: IRootState): ITopicState {\r\n  return state.registration;\r\n}\r\n\r\nexport const TopicForm = connect(mapStateToProps)(Topic);\r\n"],"sourceRoot":""}