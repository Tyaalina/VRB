{"version":3,"sources":["webpack:///./node_modules/react-confirm-alert/src/react-confirm-alert.css?1d1e","webpack:///./node_modules/react-loader-spinner/dist/loader/css/react-spinner-loader.css","webpack:///./node_modules/react-toastify/dist/ReactToastify.min.css?8d89","webpack:///./src/app/components/menu/Menu.css?1d06","webpack:///./src/app/components/pages/changePassword/ChangePasswordPage.css?9f13","webpack:///./src/app/components/pages/emailConfirmation/EmailConfirmationPage.css?90e1","webpack:///./src/app/components/pages/home/homePage.css?0626","webpack:///./src/app/components/pages/login/LoginForm.tsx","webpack:///./src/app/components/pages/login/LoginPage.css?553c","webpack:///./src/app/components/pages/profileHeader/ProfileHeaderPage.css?812c","webpack:///./src/app/components/pages/registration/RegistrationPage.css?cbbd","webpack:///./src/app/components/pages/searchBar/SearchBarPage.css?226b","webpack:///./src/app/components/pages/topic/TopicPage.css","webpack:///./src/app/components/shared/buttons/buttonComponent.css?a767","webpack:///./src/app/components/shared/input/inputComponent.css?bd92","webpack:///./src/app/components/shared/profileHeader/profileHeaderComponent.css?7231","webpack:///./src/app/components/shared/topic/topicComponent.css?432e","webpack:///./src/index.css?31bf"],"names":[],"mappings":";;;;;;;;;AAAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACC0B;AAEC;AACH;AACgD;AAC7B;AACgB;AACa;AAC7B;AACC;AACN;AAKwB;AACS;AACb;AACoB;AACpC;AAO1C;IAAiC,sCAAgC;IA4B7D,4BAAmB,KAAsB;QAAzC,YACI,kBAAM,KAAK,CAAC,SAGf;QA7BM,sBAAgB,GAAG;YACtB,QAAQ,EAAE,0CAAU,EAAE,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC,IAAI,EAAE;YACpE,QAAQ,EAAE,0CAAU,EAAE,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC,IAAI,EAAE;SACvE,CAAC;QAEK,sBAAgB,GAAG,cAAkB,QAC5C;YACI,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,EAAE;SACf,CAAC,EAJ0C,CAI1C,CAAC;QAEK,mCAA6B,GAAG;YACpC,OAAO,0CAAU,EAAE,CAAC,KAAK,CAAC,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACrD,CAAC,CAAC;QAEM,eAAS,GAAG,UAAC,GAAa,EAAE,IAAyC;YACzE,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC;YACtD,IAAM,OAAO,GAAG;gBACZ,GAAG,EAAE,GAAG;gBACR,WAAW,EAAE,IAAiC;gBAC9C,EAAE,EAAE,SAAS;aAChB,CAAC;YACF,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC;QAQQ,2BAAqB,GAAiC;;YAC5D,aAAO,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,0CAAE,OAAO,CAAC;QAC9C,CAAC,CAAC;QAEQ,6BAAuB,GAAiC;YAC9D,OAAO,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;QACvC,CAAC,CAAC;QAVE,KAAI,CAAC,OAAO,GAAG,sEAAS,CAAC,GAAG,CAAe,6EAAkB,CAAC,WAAW,CAAC,CAAC;QAC3E,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;;IAC5C,CAAC;IAUD,mCAAM,GAAN;QAAA,iBA8HC;QA5HG,OAAO,CACH;YACC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,IAAI,oEAAK,SAAS,EAAC,QAAQ;gBACpD,2DAAC,4DAAM,IACH,IAAI,EAAC,MAAM,EACX,KAAK,EAAC,SAAS,EACf,MAAM,EAAE,GAAG,EACX,KAAK,EAAE,GAAG,GACZ,CACI;YAEV,2DAAC,8CAAM,IACH,QAAQ,EAAE,IAAI,CAAC,SAAS,EACxB,kBAAkB,EAAE,IAAI,EACxB,gBAAgB,EAAE,IAAI,CAAC,6BAA6B,EAAE,EACtD,cAAc,EAAE,IAAI,EACpB,aAAa,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAEzC,UAAC,KAAK,IAAkB,QACrB,2DAAC,yDAAW,QACP,UAAC,CAAC;;gBAAK,QACR,2DAAC,+CAAO,IAAC,KAAK,EAAE,gDAAW;oBACvB,2DAAC,8CAAM;wBAAC,mEAAI,EAAE,EAAC,aAAa,IAAE,CAAC,CAAC,QAAQ,CAAC,CAAM,CAAS;oBACxD,2DAAC,2CAAG,IACA,SAAS,EAAC,QAAQ,EAClB,KAAK,EAAC,QAAQ,EACd,OAAO,EAAC,QAAQ,EAChB,GAAG,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,EAChD,SAAS,EAAC,WAAW;wBAErB;4BACI,kEAAG,SAAS,EAAC,WAAW,IAAE,CAAC,CAAC,WAAW,CAAC,CAAK;4BAE7C,2DAAC,2CAAG,IACA,KAAK,EAAC,QAAQ,EACd,SAAS,EAAC,KAAK,EACf,KAAK,EAAC,QAAQ,EACd,KAAK,EAAC,QAAQ,EACd,MAAM;gCAEN,2DAAC,iDAAS,IACN,EAAE,EAAC,YAAY,EACf,KAAK,QAAE,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,0CAAE,QAAQ,EACvC,QAAQ,EAAE,eAAK,IAAI,YAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAlE,CAAkE,GACvF,CACA;4BACN,oEAAK,SAAS,EAAE,qBAAqB,sBAAG,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,0CAAE,MAAM,0CAAE,MAAM,CAAC,WAAC,IAAI,QAAC,CAAC,SAAS,IAAI,UAAU,EAAzB,CAAyB,EAAE,CAAC,2CAAG,OAAO,CAAO;4BACpI,kEAAG,SAAS,EAAC,WAAW,IAAE,CAAC,CAAC,UAAU,CAAC,CAAK;4BAC5C,2DAAC,2CAAG,IACA,KAAK,EAAC,QAAQ,EACd,SAAS,EAAC,KAAK,EACf,KAAK,EAAC,QAAQ,EACd,KAAK,EAAC,QAAQ,EACd,MAAM;gCAEN,2DAAC,iDAAS,IACN,EAAE,EAAC,eAAe,EAClB,IAAI,EAAE,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,EACrD,KAAK,QAAE,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,0CAAE,QAAQ,EACvC,QAAQ,EAAE,eAAK,IAAI,YAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAArE,CAAqE,GAC1F;gCACF,2DAAC,8CAAM,IACH,IAAI,EAAE,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,2DAAC,kDAAI,IAAC,IAAI,EAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,2DAAC,kDAAI,IAAC,IAAI,EAAC,QAAQ,GAAG,EACjF,QAAQ,EAAE,KAAK,EACf,OAAO,EAAE,eAAK,IAAI,YAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAA3E,CAA2E,GAC/F,CAEA;4BACN,oEAAK,SAAS,EAAE,qBAAqB,sBAAG,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,0CAAE,MAAM,0CAAE,MAAM,CAAC,WAAC,IAAI,QAAC,CAAC,SAAS,IAAI,UAAU,EAAzB,CAAyB,EAAE,CAAC,2CAAG,OAAO,CAAO;4BAEpI,2DAAC,4CAAI,IACD,IAAI,QACJ,MAAM,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,EACzB,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EACtB,OAAO,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EACzB,KAAK,EAAE;oCACH,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;oCACnD,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;iCACvD;gCAED,2DAAC,2CAAG,IACA,QAAQ,EAAC,aAAa,EACtB,SAAS,EAAC,QAAQ,EAClB,KAAK,EAAC,QAAQ,EACd,OAAO,EAAC,QAAQ,EAChB,GAAG,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE;oCAEhD,2DAAC,8CAAM,IACH,IAAI,EAAC,QAAQ,EACb,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,EAClB,OAAO,EAAE;;4CAAM,YAAI,CAAC,SAAS,CAAC;gDACtB,QAAQ,QAAE,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,0CAAE,QAAQ;gDAC1C,QAAQ,QAAE,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,0CAAE,QAAQ;6CAC7C,EACD,SAAS,CACZ;yCAAA,GAAI,CACP;gCAEN,2DAAC,2CAAG,IACA,QAAQ,EAAC,cAAc,EACvB,SAAS,EAAC,QAAQ,EAClB,KAAK,EAAC,QAAQ,EACd,OAAO,EAAC,QAAQ,EAChB,GAAG,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE;oCAEhD,2DAAC,8CAAM,IAAC,OAAO,EAAE,cAAM,2EAAO,CAAC,IAAI,CAAC,0EAAiB,CAAC,EAA/B,CAA+B,EAAE,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,GAAI,CAC7E,CACH,CACL,CACJ;oBACN,2DAAC,uFAAkB,IAAC,SAAS,EAAE,IAAI,IAC9B,KAAI,CAAC,uBAAuB,EAAE,CACd;oBACrB,2DAAC,uFAAkB,IAAC,OAAO,EAAE,IAAI,IAC5B,KAAI,CAAC,qBAAqB,EAAE,CACZ,CACf,CACT;aAAA,CACS,CACjB,EArGwB,CAqGxB,CACI,CACN,CACF;IAEL,CAAC;IACL,yBAAC;AAAD,CAAC,CAzKgC,4CAAK,CAAC,SAAS,GAyK/C;AAGD,SAAS,eAAe,CAAC,KAAiB;IACtC,oBACO,KAAK,CAAC,KAAK,EAChB;AACN,CAAC;AAEM,IAAM,SAAS,GAAG,2DAAO,CAC5B,eAAe,CAClB,CAAC,kBAAkB,CAAC,CAAC;;;;;;;;;;;;AC/MtB,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,uC","file":"app.f067d916ea3b878945ea.hot-update.js","sourcesContent":["// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import { ILoginState } from './LoginState';\r\nimport React from \"react\";\r\nimport { Form } from 'semantic-ui-react';\r\nimport * as Yup from \"yup\";\r\nimport './LoginPage.css'\r\nimport { TextInput, Grid, Box, Button, Grommet, Header } from 'grommet';\r\nimport {customTheme} from '../../../../App'\r\nimport history from \"../../../utils/helpers/HistoryHelper\";\r\nimport { REGISTRATION_PAGE } from \"../../../../shared/constants/routes\";\r\nimport { View, Hide } from 'grommet-icons';\r\nimport { Translation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { IRootState } from '../../../reduxInfrastructure/RootState';\r\nimport { LoginDto } from '../../../types/models/LoginDto';\r\nimport { IBaseFormProps } from '../../../types/form/IBaseFormProps';\r\nimport { LoginActions } from './LoginActions';\r\nimport container from '../../../inversify/inversifyContainer';\r\nimport { SERVICE_IDENTIFIER } from '../../../inversify/inversifyTypes';\r\nimport { Formik, FormikBag, FormikHelpers } from 'formik';\r\nimport { FormMessageWrapper } from '../../shared/wrappers/FormMessageWrapper';\r\nimport Loader from 'react-loader-spinner';\r\n\r\n\r\n\r\ntype IFormState = LoginDto;\r\ntype ILoginFormProps = IBaseFormProps<IFormState, { reveal: boolean, isLoading: boolean }>;\r\n\r\nclass LoginFormComponent extends React.Component<ILoginFormProps> {\r\n    protected readonly actions: LoginActions;\r\n\r\n    public validationSchema = {\r\n        username: Yup.string().required('Поле является обязательным').trim(),\r\n        password: Yup.string().required('Поле является обязательным').trim(),\r\n    };\r\n\r\n    public getInitialValues = (): IFormState => (\r\n    {\r\n        username: '',\r\n        password: '',\r\n    });\r\n\r\n    private _createValidationSchemaObject = (): Yup.ObjectSchema => {\r\n        return Yup.object().shape(this.validationSchema);\r\n    };\r\n\r\n    private _onSubmit = (dto: LoginDto, form: FormikHelpers<LoginDto> | undefined): void => {\r\n        this.props.dispatch(this.actions.clearFormMessages());\r\n        const payload = {\r\n            dto: dto,\r\n            formHelpers: form as FormikBag<{}, IFormState>,\r\n            id: undefined\r\n        };\r\n        this.props.dispatch(this.actions.login(payload));\r\n    };\r\n\r\n    public constructor(props: ILoginFormProps) {\r\n        super(props);\r\n        this.actions = container.get<LoginActions>(SERVICE_IDENTIFIER.LoginAction);\r\n        props.dispatch(this.actions.initForm());\r\n    }\r\n\r\n    protected getCustomErrorMessage: () => React.ReactNode | null = () => {\r\n        return this.props.form.formError?.message;\r\n    };\r\n\r\n    protected getCustomSuccessMessage: () => React.ReactNode | null = () => {\r\n        return this.props.form.formSuccess;\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            {this.props.helpers.isLoading && <div className=\"loader\">\r\n                <Loader\r\n                    type=\"Puff\"\r\n                    color=\"#ADFF00\"\r\n                    height={100}\r\n                    width={100}\r\n                />\r\n                </div>\r\n            }\r\n            <Formik\r\n                onSubmit={this._onSubmit}\r\n                enableReinitialize={true}\r\n                validationSchema={this._createValidationSchemaObject()}\r\n                validateOnBlur={true}\r\n                initialValues={this.getInitialValues()}\r\n            >\r\n            {(props): JSX.Element => (\r\n                <Translation>\r\n                    {(t) => ( \r\n                    <Grommet theme={customTheme}>\r\n                        <Header><h2 id='LoginHeader'>{t(\"Log in\")}</h2></Header>\r\n                        <Box\r\n                            direction=\"column\"\r\n                            align=\"center\"\r\n                            justify=\"center\"\r\n                            pad={{ horizontal: 'medium', vertical: 'small' }}\r\n                            className=\"loginBody\"\r\n                        >\r\n                            <div>\r\n                                <p className=\"loginText\">{t(\"Full name\")}</p>\r\n                                \r\n                                <Box\r\n                                    width=\"medium\"\r\n                                    direction=\"row\"\r\n                                    align=\"center\"\r\n                                    round=\"xlarge\"\r\n                                    border\r\n                                >\r\n                                    <TextInput\r\n                                        id='emailInput'\r\n                                        value={this.props.form.record?.username}\r\n                                        onChange={event => this.props.dispatch(this.actions.emailChanged(event.target.value))}\r\n                                    />\r\n                                </Box>\r\n                                <div className={\"fields__error__text\"}>{this.props.form.formError?.errors?.filter(t => t.fieldName == \"Username\")[0]?.message}</div>\r\n                                <p className=\"loginText\">{t(\"Password\")}</p>\r\n                                <Box\r\n                                    width=\"medium\"\r\n                                    direction=\"row\"\r\n                                    align=\"center\"\r\n                                    round=\"xlarge\"\r\n                                    border\r\n                                >\r\n                                    <TextInput\r\n                                        id='passwordInput'\r\n                                        type={this.props.helpers.reveal ? 'text' : 'password'}\r\n                                        value={this.props.form.record?.password}\r\n                                        onChange={event => this.props.dispatch(this.actions.passwordChanged(event.target.value))}\r\n                                    />\r\n                                    <Button\r\n                                        icon={this.props.helpers.reveal ? <View size=\"medium\" /> : <Hide size=\"medium\" />}\r\n                                        disabled={false}\r\n                                        onClick={event => this.props.dispatch(this.actions.revealChanged(!this.props.helpers.reveal))}\r\n                                    />\r\n\r\n                                </Box>\r\n                                <div className={\"fields__error__text\"}>{this.props.form.formError?.errors?.filter(t => t.fieldName == \"Password\")[0]?.message}</div>\r\n\r\n                                <Grid\r\n                                    fill\r\n                                    margin={{ top: 'medium' }}\r\n                                    rows={['auto', 'auto']}\r\n                                    columns={['auto', 'auto']}\r\n                                    areas={[\r\n                                        { name: 'loginButton', start: [0, 0], end: [1, 0] },\r\n                                        { name: 'singinButton', start: [1, 0], end: [1, 1] },\r\n                                    ]}\r\n                                >\r\n                                    <Box\r\n                                        gridArea=\"loginButton\"\r\n                                        direction=\"column\"\r\n                                        align=\"center\"\r\n                                        justify=\"center\"\r\n                                        pad={{ horizontal: 'medium', vertical: 'small' }}\r\n                                    >\r\n                                        <Button\r\n                                            type=\"submit\"\r\n                                            label={t(\"Log in\")} \r\n                                            onClick={() => this._onSubmit({\r\n                                                    username: this.props.form.record?.username,\r\n                                                    password: this.props.form.record?.password\r\n                                                },\r\n                                                undefined\r\n                                            )} />\r\n                                    </Box>\r\n\r\n                                    <Box\r\n                                        gridArea=\"singinButton\"\r\n                                        direction=\"column\"\r\n                                        align=\"center\"\r\n                                        justify=\"center\"\r\n                                        pad={{ horizontal: 'medium', vertical: 'small' }}\r\n                                    >\r\n                                        <Button onClick={() => history.push(REGISTRATION_PAGE)} label={t(\"Sign in\")} />\r\n                                    </Box>\r\n                                </Grid>\r\n                            </div>\r\n                        </Box>\r\n                        <FormMessageWrapper isSuccess={true}>\r\n                            {this.getCustomSuccessMessage()}\r\n                        </FormMessageWrapper>\r\n                        <FormMessageWrapper isError={true}>\r\n                            {this.getCustomErrorMessage()}\r\n                        </FormMessageWrapper>\r\n                    </Grommet>\r\n                    )}\r\n                </Translation>\r\n            )}\r\n        </Formik>\r\n        </>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state: IRootState): ILoginState {\r\n    return {\r\n        ...state.login\r\n    };\r\n}\r\n\r\nexport const LoginForm = connect(\r\n    mapStateToProps,\r\n)(LoginFormComponent);","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin"],"sourceRoot":""}